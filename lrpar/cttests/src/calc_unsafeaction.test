name: Test unsafe user actions using the calculator grammar
yacckind: Original(YaccOriginalActionKind::UserAction)
grammar: |
    %start Expr
    %actiontype Result<u64, ()>
    %avoid_insert 'INT'
    %%
    Expr: Expr '+' Term { unsafe { unsafe_ok($1? + $3?) } }
        | Term { $1 }
        ;

    Term: Term '*' Factor { unsafe { unsafe_ok($1? * $3?) } }
        | Factor { $1 }
        ;

    Factor: '(' Expr ')' { $2 }
          | 'INT' {
                let l = $1.map_err(|_| ())?;
                match $lexer.span_str(l.span()).parse::<u64>() {
                    Ok(v) => unsafe { unsafe_ok(v) },
                    Err(_) => {
                        let ((_, col), _) = $lexer.line_col(l.span());
                        eprintln!("Error at column {}: '{}' cannot be represented as a u64",
                                  col,
                                  $lexer.span_str(l.span()));
                        Err(())
                    }
                }
            }
          ;
    %%
    // Just check that unsafe blocks work in actions.
    unsafe fn unsafe_ok<T, E>(x:T) -> Result<T, E> {
      Ok(x)
    }

lexer: |
    %%
    [0-9]+ "INT"
    \+ "+"
    \* "*"
    \( "("
    \) ")"
    [\t ]+ ;
