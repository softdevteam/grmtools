searchState.loadedDescShard("cfgrammar", 0, "A library for manipulating Context Free Grammars (CFG). It …\nA type specifically for rule indices. A type specifically …\nA type specifically for rule indices. A type specifically …\nA type specifically for rule indices. A type specifically …\nA type specifically for rule indices. A type specifically …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCache newlines from an input. These can be used to turn …\nConvert a byte offset in the input to the byte offset of …\nConvert a byte offset in the input to a logical line …\nA convenience method to return the logical line and …\nFeed further input into the cache. This input is …\nReturns the argument unchanged.\nConstruct a <code>NewlineCache</code> directly from a <code>&amp;str</code>. This is …\nCalls <code>U::from(self)</code>.\nCreate an empty <code>NewlineCache</code>.\nReturn the (start byte, end byte) of the lines containing …\nA possibly inexact location which could either be a <code>Span</code>, …\nA <code>Span</code> records what portion of the user’s input …\nImplemented for errors and warnings to provide access to …\nByte offset of the end of the span.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this <code>Span</code> covers 0 bytes, or <code>false</code> …\nLength in bytes of the span.\nCreate a new span starting at byte <code>start</code> and ending at …\nReturns the spans associated with the error, always …\nReturns the <code>SpansKind</code> associated with this error.\nByte offset of the start of the span.\nThe variant used in the Eco language composition editor\nAutomatically create a parse tree instead of …\nSimilar to the original Yacc style, but allowing …\nDo not do execute actions of any sort.\nThe original Yacc style as documented by Johnson,\nExecute user-specified actions attached to each …\nThe particular Yacc variant this grammar makes use of.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny error from the Yacc parser returns an instance of this …\nContains a <code>GrammarAST</code> structure produced from a grammar …\nAn AST representing a grammar. This is built up gradually: …\nReturns a <code>GrammarAST</code> constructed as the result of parsing …\nReturns all errors which were encountered during AST …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses the <code>%grmtools section</code> expecting it to contain a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether any errors where encountered during the …\nParses a source file into an AST, returning an ast and any …\nReturns the <code>YaccKind</code> that was used to parse the <code>GrammarAST</code>.\n<code>Firsts</code> stores all the first sets for a given grammar. For …\nReturn all the firsts for rule <code>ridx</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the rule <code>ridx</code> has epsilon in its first set.\nReturns true if the token <code>tidx</code> is in the first set for …\nGenerates and returns the firsts set for the given grammar.\nEnsures that the firsts bit for token <code>tidx</code> rule <code>ridx</code> is …\n<code>Follows</code> stores all the Follow sets for a given grammar. …\nReturn the Follows <code>Vob</code> for rule <code>ridx</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the token <code>tidx</code> is in the follow set for …\nGenerates and returns the Follows set for the given …\nA <code>SentenceGenerator</code> can generate minimal sentences for any …\nRepresentation of a <code>YaccGrammar</code>. See the top-level …\nGet the action for production <code>pidx</code>. Panics if <code>pidx</code> doesn’…\nIs the token <code>tidx</code> marked as <code>%avoid_insert</code>?\nReturn the index of the end token.\nReturn a <code>YaccFirsts</code> struct for this grammar.\nReturn a <code>YaccFirsts</code> struct for this grammar.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIs there a path from the <code>from</code> rule to the <code>to</code> rule? Note …\nReturn the <code>RIdx</code> of the implict rule if it exists, or <code>None</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator which produces (in order from …\nReturn an iterator which produces (in order from …\nReturn an iterator which produces (in order from …\nWhat is the cost of a maximal sentence for the rule <code>ridx</code>? …\nNon-deterministically return a minimal sentence from the …\nWhat is the cost of a minimal sentence for the rule <code>ridx</code>? …\nReturn (in arbitrary order) all the minimal sentences for …\nTakes as input a Yacc grammar of <code>YaccKind</code> as a <code>String</code> <code>s</code> …\nReturns the string representation of a given production …\nGet the sequence of symbols for production <code>pidx</code>. Panics if …\nHow many symbols does production <code>pidx</code> have? Panics if <code>pidx</code> …\nReturn the precedence of production <code>pidx</code> (where <code>None</code> …\nReturn the rule index of the production <code>pidx</code>. Panics if …\nHow many productions does this grammar have?\nGet the programs part of the grammar\nReturn the index of the rule named <code>n</code> or <code>None</code> if it doesn’…\nReturn the name of rule <code>ridx</code>. Panics if <code>ridx</code> doesn’t …\nReturn the span of rule <code>ridx</code>. Panics if <code>ridx</code> doesn’t …\nReturn the name of rule <code>ridx</code>. Panics if <code>ridx</code> doesn’t …\nReturn the productions for rule <code>ridx</code>. Panics if <code>ridx</code> doesn…\nHow many rules does this grammar have?\nReturn a <code>SentenceGenerator</code> which can then generate minimal …\nReturn the production index of the start rule’s sole …\nWhat is the index of the start rule? Note that cfgrammar …\nReturn the %epp entry for token <code>tidx</code> (where <code>None</code> indicates …\nReturn the index of the token named <code>n</code> or <code>None</code> if it doesn…\nReturn the name of token <code>tidx</code> (where <code>None</code> indicates “the …\nReturn the precedence of token <code>tidx</code> (where <code>None</code> indicates …\nReturn the span for token given by <code>tidx</code> if one exists. If …\nHow many tokens does this grammar have?\nReturns a map from names to <code>TIdx</code>s of all tokens that a …\nThe first span is the first occurrence, and a span for …\nContains the error value\nContains a single span at the site of the error.\nContains the success value\nIndicates how to interpret the spans of an error.\nAny error from the Yacc parser returns an instance of this …\nThe various different possible Yacc parser errors.\nAny Warning from the Yacc parser returns an instance of …\nThe various different possible Yacc parser errors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the spans associated with the error, always …\nReturns the spans associated with the error, always …\nReturns the SpansKind associated with this error.\nReturns the SpansKind associated with this error.")